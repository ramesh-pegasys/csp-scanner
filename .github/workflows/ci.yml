name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run tests with coverage
      run: |
        python -m pytest --cov=app --cov-report=term-missing --cov-fail-under=90

    - name: Run Black code formatting check
      run: |
        black --check --diff app tests

    - name: Run Flake8 linting
      run: |
        flake8 app tests

    - name: Run MyPy type checking
      run: |
        mypy app

  # docker:
  #   needs: test
  #   runs-on: ubuntu-latest
  #   if: github.ref == 'refs/heads/main' && github.event_name == 'push'

  #   steps:
  #   - name: Checkout code
  #     uses: actions/checkout@v4

  #   - name: Set up Docker Buildx
  #     uses: actions/docker/setup-buildx-action@v3

    # - name: Log in to Docker Hub
    #   uses: docker/login-action@v3
    #   with:
    #     username: ${{ secrets.DOCKERHUB_USERNAME }}
    #     password: ${{ secrets.DOCKERHUB_PASSWORD }}

    # - name: Extract metadata
    #   id: meta
    #   uses: docker/metadata-action@v5
    #   with:
    #     images: ${{ secrets.DOCKERHUB_USERNAME }}/csp-scanner
    #     tags: |
    #       type=ref,event=branch
    #       type=ref,event=pr
    #       type=sha,prefix={{branch}}-
    #       type=raw,value=latest,enable={{is_default_branch}}

    # - name: Build Docker image (no push)
      uses: docker/build-push-action@v5
      with:
        context: .
        push: false
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max